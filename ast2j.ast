/*
 * $Id: ast2j.ast,v 1.2 2002/09/29 15:37:19 takuo Exp $
 * ast2j.ast (AST Definition for AST2J)
 * Copyright (C) 2000,2001,2002 by Takuo Watanabe (takuo@acm.org)
 * All Rights Reserved.
 *
 * This program was developed by Takuo Watanabe as a part of AST2J,
 * a translator from AST (Abstract Sytax Tree) description to Java
 * classes.
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the
 * copyright notice and this permission notice appear in all copies of
 * the software, derivative works or modified versions, and any
 * portions thereof, and that both notices appear in supporting
 * documentation.
 *
 * FREE USE OF THIS SOFTWARE IS ALLOWED IN ITS "AS IS" CONDITION. BUT
 * WITHOUT WARRANTY. THE AUTHORS DISCLAIM ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 */

/*
 * Concrete Syntax for AST Definitions
 *     Input ::= { Command | Definition }
 *     Definition ::= AliasDef | SyntaxDef
 *     AliasDef ::= Name '=' Type
 *     SyntaxDef ::= Name '::=' NodeDef { '|' NodeDef }
 *     NodeDef ::= Name [ '(' [ FieldDef { ',' FieldDef }] ')' ]
 *     FieldDef ::= Name ':' Type
 *     Type ::= Name | Type '[]'
 *     Command ::= '#' Name CommandArg
 *     CommandArg ::= Name | Number | String
 */

#author "Takuo Watanabe (takuo@acm.org)"  // author of this AST definition
#version "1.0"                            // version of this AST definition
#package "jp.ac.titech.c.psg.ast2j"       // package of generated Java classes

#root AST               // Java class name of the root AST node
#generate_root yes      // if yes, the root AST node class is generated
#visitor ASTVisitor     // visitor (abstract) class name
#use_lineno no

Name = String           // type aliasing

DefinitionAST ::= AliasDefAST (name: Name, type: TypeAST)
                | SyntaxDefAST (name: Name, defs: NodeDefAST[])

NodeDefAST ::= CNodeDefAST | ANodeDefAST
CNodeDefAST ::= CNodeDefAST (name: Name, fields: FieldDefAST[])
ANodeDefAST ::= ANodeDefAST (name: Name)

// For NodeDefAST, CNodeDefAST and ANodeDefAST, you can also write as:
//     NodeDefAST ::= CNodeDefAST (name: Name, fields: FieldDefAST[])
//                  | ANodeDefAST (name: Name)

FieldDefAST ::= FieldDefAST (var: Name, type: TypeAST)

TypeAST ::= PrimTypeAST (name: Name)
          | ArrayTypeAST (elem: TypeAST)

/*
 * The Java source files of the AST classes were actually generated
 * from this AST definition.
 */

