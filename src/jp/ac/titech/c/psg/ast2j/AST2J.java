/* 
 * $Id: AST2J.java,v 1.3 2005/05/19 08:23:10 takuo Exp $
 * AST2J.java
 * Copyright (C) 2000,2001,2002 Takuo Watanabe (takuo@acm.org)
 * All Rights Reserved
 *
 * This program was developed by Takuo Watanabe as a part of AST2J, 
 * a program that generates Java classes from AST (Abstrace Syntax
 * Tree) node definitions. The classes generated conform to the GoF
 * Visitor pattern.
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the
 * copyright notice and this permission notice appear in all copies of
 * the software, derivative works or modified versions, and any
 * portions thereof, and that both notices appear in supporting
 * documentation.
 *
 * FREE USE OF THIS SOFTWARE IS ALLOWED IN ITS "AS IS" CONDITION. BUT
 * WITHOUT WARRANTY. THE AUTHORS DISCLAIM ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 */

package jp.ac.titech.c.psg.ast2j;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.GregorianCalendar;

/**
 * The main class of AST2J.
 *
 * @author Takuo Watanabe
 * @version 0.5
 **/
public class AST2J {

    // Constants
    private static final String NAME = "AST2J";
    private static final String AUTHOR = "Takuo Watanabe";
    private static final String VERSION = "0.5a";

    private static void showUsage () {
        System.err.println("Usage: ast2j [ -options ] [ file ]");
        System.err.println("where options include:");
        System.err.println("  -t -target <dir>  specify target directory");
        System.err.println("  -d -debug         turn on debug mode");
        System.err.println("  -v -version       print system version");
        System.err.println("  -h -help          print this help message");
        System.exit(0);
    }

    private static void showVersion () {
        System.out.println(NAME + 
                           " by " + AUTHOR + 
                           " (version " + VERSION + 
                           ")");
        System.exit(0);
    }

    public static void main (String[] args) {
        boolean debugmode = false;
        int i = 0;
        while (i < args.length) {
            String arg = args[i];
            if (arg.equals("-h") || arg.equals("-help"))
                showUsage();
            else if (arg.equals("-v") || arg.equals("-version"))
                showVersion();
            else if (arg.equals("-d") || arg.equals("-debug"))
                debugmode = true;
            else if (arg.equals("-t") || arg.equals("-target")) {
                i++;
                if (i < args.length) {
                    System.err.println("This feature is not yet implemented. Sorry!");
                    System.exit(1);
                } else
                    showUsage();
            }
            else break;
            i++;
        }

        TransAST transAST = new TransAST();
        if (debugmode) 
            transAST.setDebug();
        else {
            Date date = GregorianCalendar.getInstance().getTime();
            transAST.setMessage("// This file was generated by " + NAME + 
                                " (" + VERSION + ")" +
                                " on " + date);
        }
        if (i >= args.length) {
            transAST.setSource("stdin");
            try {
                new Parser (new BufferedInputStream(System.in)).
                    parse(transAST);
                transAST.finishUp();
            } catch (Exception e) {
                System.err.println(e.toString());
                System.exit(1);
            }
        } else {
            transAST.setSource(args[i]);
            InputStream in = null;
            try {
                in = new FileInputStream(args[i]);
                new Parser (new BufferedInputStream(in)).parse(transAST);
                transAST.finishUp();
            } catch (Exception e) {
                System.err.println(e.toString());
                System.exit(1);
            }
            finally {
                if (in != null) 
                    try { in.close(); } catch (IOException e) {}
            }
        }
    }
}

